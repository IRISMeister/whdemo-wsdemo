Class MyInstallerPackage.Installer
{

XData setup [ XMLNamespace = INSTALLER ]
{
<Manifest>
<Var Name="WSDLUserName" Value="appuser"/> 
<Var Name="DataBaseDir" Value="/home/irisowner/database/"/> 

<User Username="appuser" PasswordVar="appuserpwd" Roles="%All" Fullname="Ensemble Operator" Namespace="" Routine="" ExpirationDate="" ChangePassword="0" Enabled="1" Comment="Ensemble operator account for Maganed Alert"/>

    <Namespace Name="WSDEMO" Create="overwrite" Code="WSDEMO" Data="WSDEMO">
      <Configuration>
        <Database Name="WSDEMO" Create="overwrite" Dir="${DataBaseDir}WSDEMO" InitialSize="1"/>
      </Configuration>
		<Invoke Class="%SYSTEM.OBJ" Method="ImportDir">
			<Arg Value="${SRCDIR}" />
			<Arg Value="" />
			<Arg Value="ck" />
			<Arg Value=".e" />
			<Arg Value="1" />
		</Invoke>

		<Invoke Class="Common.ProductMaster" Method="Populate" CheckStatus="1" Return="RetVal"> </Invoke>
		<!-- instead of calling ClarlAll() -->
		<Invoke Class="Common.Util" Method="SetToday" > 
			<Arg Value="2001-01-01" />
		</Invoke>
	</Namespace>

</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod setupMethod(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
    #; Let our XGL document generate code for this method. 
    Quit ##class(%Installer.Manifest).%Generate(%compiledclass, 
    %code, "setup")
}

ClassMethod setup(ByRef tVars) As %Status
{
  Set tSC='$$$OK
  Try {
	    ;appuserアカウントのパスワード(値は任意)。WSDLクライアント作成、管理アラート閲覧時のログインの際に使用する。  
		If '$D(tVars("appuserpwd")) { Set tVars("appuserpwd")="sys" }
		If '$D(tVars("SRCDIR")) { Set tVars("SRCDIR")="/home/irisowner/src" }
  	  	Set tSC=..setupMethod(.tVars)

		Set oldns=$NAMESPACE
		New $NAMESPACE   ; just in case
		Set $NAMESPACE="%SYS"

		Set tSC = ##Class(Security.Applications).Get("/csp/wsdemo",.props)
		Set props("DeepSeeEnabled")=1
		Set props("MatchRoles")=":%All"
		Set tSC = ##Class(Security.Applications).Modify("/csp/wsdemo",.props)

		#; Enables ECP Server
		Set tSC=##Class(Security.Services).Get("%Service_ECP",.Properties)
		Set Properties("Enabled")=1
		Set tSC=##Class(Security.Services).Modify("%Service_ECP",.Properties)

		#; need to restart 
		Set tSC=##Class(Config.config).Get(.Properties)
		Set Properties("MaxServerConn")=5
		Set tSC=##Class(Config.config).Modify(.Properties)

		Set $NAMESPACE=oldns

  } Catch(e) {
	  Set tSC=e.AsStatus()
  }
  Return tSC
}

}
